-----------------------------------------
2018/04/01 05:35:59
select * from categories
Table 'butterfly.categories' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:35:59
select count(*) from articles where 1 
Table 'butterfly.articles' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:35:59
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
Table 'butterfly.articles' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:42:24
select * from users where name = 'admin' 
Table 'butterfly.users' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:43:50
select * from users where name = 'admin' 
Table 'butterfly.users' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:44:12
select * from users where name = 'admin' 
Table 'butterfly.users' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:44:18
select * from categories
Table 'butterfly.categories' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:45:25
select * from users where name = 'admin' 
Table 'butterfly.users' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:51:17
select * from users where name = 'admin' 
Table 'butterfly.users' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 05:56:50
select * from users where name = 'admin' 
Table 'butterfly.users' doesn't exist
-----------------------------------------

-----------------------------------------
2018/04/01 06:00:55
select * from users where name = 'admin' 
-----------------------------------------

-----------------------------------------
2018/04/01 06:00:55
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:01:37
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:01:58
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:02:07
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:06:21
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:06:38
select * from users where name = 'admin' 
-----------------------------------------

-----------------------------------------
2018/04/01 06:06:38
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:23
select * from articles where art_id = 
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:23
select title,content,pubtime,catname,comm,thumb from articles inner join categories on articles.cat_id = categories.cat_id where art_id = 
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:23
select * from comments where art_id = 
You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near '' at line 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:23
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:23
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:23
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 06:08:48
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:22:06
select * from users where name = 'admin' 
-----------------------------------------

-----------------------------------------
2018/04/01 06:22:06
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:23:12
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:25:48
select * from users where name = 'admin' 
-----------------------------------------

-----------------------------------------
2018/04/01 06:25:48
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:25:51
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:26:01
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:28:16
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:28:21
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:28:24
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:28:29
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:28:33
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:33:27
select * from users where name = 'admin' 
-----------------------------------------

-----------------------------------------
2018/04/01 06:33:27
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:33:29
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:33:33
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:33:34
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:37:44
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:37:47
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:37:48
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:37:58
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:37:58
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 06:37:58
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 06:38:10
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:38:10
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 06:38:10
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 06:39:39
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:48:40
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:50:01
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:50:44
select * from users where name = 'admin' 
-----------------------------------------

-----------------------------------------
2018/04/01 06:50:44
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:51:21
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:51:25
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:51:27
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:24
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:24
insert into articles (title,cat_id,content,pubtime,arttag) values ('大牛给计算机专业学生的7个建议','1','大牛给计算机专业学生的7个建议

【导读】由于Joel Spolsky的双重身份（昔日耶鲁大学计算机系学长，今日Fog Creek软件公司的CEO），所以听听他的建议，对于当今无数困扰于就业压力的中国高校计算机专业学子来说，是大有裨益的。你们会发现，大多数建议，都在强调“软实力”的价值。
1、毕业前练好写作

如果不是Linus Torvalds不断地散布福音，请问Linux操作系统会成功吗？虽然他是一个非常聪明的计算机天才，但是Linux吸引来全世界一大批志愿者的真正原因却是Linus Torvalds的表达能力。他通过电子邮件和邮件列表用书面形式传播自己的想法，最终引起了所有人的注意。

你听说过现在风靡一时的“极限编程”（Extreme Programming）吗？我在这个地方不谈我对极限编程的看法，我只说如果你听过这个词，那么原因就是它的倡导者都是一些非常有才华的作家和演说家。

即使我们缩小范围，将目光局限在任何一个软件开发团体中，你也会发现该团体中最有权势和影响力的程序员正是那些表达能力强的程序员，他们无论是做书面表达还是做口头表达，都能够清晰、自如、具有说服力地传达观点。

一个普通程序员与一个优秀程序员的区别，不在于他们懂得的编程语言谁多谁少，也不在于他们喜欢用Python语言还是喜欢用Java语言，而在于他们能否与他人交流思想。如果你能说服其他人，你的力量就可以得到放大。如果你能写出清晰的注释和技术规格说明书，其他程序员就能够理解你的代码，因此他们就能在自己的代码中使用，而不必重写。如果你做不到这一点，你的代码对其他人就没有价值。如果你能为最终用户写出清晰的使用手册，其他人就能明白你的代码是用来干什么的，这是唯一让别人明白你的代码有何价值的方法。

如果一个程序员不会用英语写作、没有良好的写作能力，我就不会雇他。如果你能写，不管你去哪家公司工作，你很快就会发现写作技术文档的任务会落到你头上，这意味着你已经开始在放大自己的影响力了，管理层正在注意到你。

大学里有些课程被公认为“写作密集型”（writing intensive）课程，这就是说为了拿到学分，你必须写作多得可怕的文字。一定要去上这样的课程！不要管学科，只要这门课每周甚至每天都要你写东西，你就去上。

你还可以动手写日记或者网志。你写得越多，写作就会变得越容易。写起来越容易，你就会写得越多。这是一个良性循环。

2、毕业前学好C语言

第二点我要讲的是C语言。请注意，我说的是C语言，而不是C++。虽然在实际使用中C语言已经越来越罕见，但是它仍然是当前程序员的共同语言。C语言让程序员互相沟通，更重要的是，它比你在大学中学到的“现代语言”（比如ML语言、Java语言、Python语言或者其它正在教授的流行垃圾语言）都更接近机器。你至少需要花一个学期来了解机器原理，否则你永远不可能在高级语言的层次写出高效的代码。你也永远无法开发编译器和操作系统，而它们恰恰属于目前程序员能够得到的最佳工作之列。别人也永远不会放心将大型项目的架构设计交给你。

我不管你懂多少延续（continuation）、闭包（closure）、异常处理（exception handling），只要你不能解释为什么while (*s++ = *t++)；这句代码的作用是复制字符串，或者不觉得这是世界上对你来说再自然不过的事情，那么你就是在盲目无知的情况下编程。在我看来，这就好像一个医生不懂得最基本的解剖学就在开处方，他看病的根据完全是因为那些娃娃脸的医药厂商销售代表说这种药有用。

3、毕业前学好微观经济学

如果你没有上过任何经济学课程，那么我首先来做一个超短的评论：经济学是这样的学科之一，刚开始学的时候轰轰烈烈，有许多有用的、言之有理的理论和可以在真实世界中得到证明的事实，等等；但是，再学下去就每况愈下，有用的东西就不多了。经济学一开始那个有用的部分正是微观经济学，它是商业领域所有重要理论的基础。跟在微观经济学后面的东西就不行了。你接下来学的是宏观经济学，如果你愿意，尽管跳过去，也不会有什么损失。宏观经济学开头的部分是利息理论，内容比方说是利率与失业之间的关系，但是怎么说呢，看上去这部分里面还没有被证实的东西多于已经被证实的东西。学完这部分，后面的内容越来越糟糕，许多经济学专业的学生实际上都变成在搞物理学，因为这样才能在华尔街上找到更好的工作。但是不管怎样，你一定要去学微观经济学，因为你必须搞懂供给和需求，你必须明白竞争优势，你必须理解什么是净现值（NPV），什么是贴现，什么是边际效用。只有这样，你才会懂得为什么生意是现在这种做法。

为什么计算机系的学生也应该学经济学？因为，从经营一家公司的角度来看，比起那些不懂的程序员，一个理解基本商业规则的程序员将会更有价值。就是这么简单。我无法告诉你有多少次我是那样地充满挫折感，因为我看到了太多的提出一些疯狂的想法的程序员，这些想法在代码上也许可行，但在资本主义世界中毫无意义。如果你懂得商业规则，你就是一个更有价值的程序员，你会因此得到回报的，但是前提是你要去学习微观经济学。

4、不要因为枯燥就不选修非计算机专业的课程

想提高GPA绩点的一个好方法就是多选修非计算机系的课程。请千万不要低估你的GPA的重大意义。千千万万的人事经理和招聘人员在拿到一份简历的时候，第一眼就会去看GPA，包括我也是这样。我们不会为这种做法道歉。为什么？因为GPA不反映单个的成绩，而是代表了许多个教授在一段很长的时间中，在不同的情况下，对你的表现的一个总的评估。SAT成绩难道不够吗？哈，那只不过是一场几个小时的测试罢了。GPA中包括了四年大学期间你的小论文、期中考试和课堂表现，总数有几百次之多。当然，GPA也有自己的问题，不是百分之百准确。比如，这些年来，老师对学生的打分越来越宽松，学习成绩有通货膨胀的趋势。再比如，GPA无法反映课程的难度，没人能够看出你的GPA是来自无名社区大学家政系的轻松课程还是来自加州理工学院针对研究生的量子力学课程。渐渐地，我形成了一套自己的做法，首先我会过滤掉所有来自社区大学、GPA低于2.5的简历，然后我会要求剩下的人给我寄成绩单和推荐信。我再从中发现那些成绩一贯优秀的人，而不是那些仅仅在计算机系课程中得到高分的人。

为什么我要关心某人的“欧洲历史”课程成绩呢，毕竟作为雇主我要找的应该是程序员啊？何况，历史是那么枯燥，不得高分很正常。哦，这么说来，你的意思是我应该雇用你，而不用考虑一旦工作变得枯燥你会不会努力工作？别忘了，在编程工作中也有很枯燥的东西。每一项工作都有枯燥难耐的时刻。我不想雇用那些只想干有趣事情的人。

5、选修有大量编程实践的课程

我依然清楚记得我发誓绝不读研究生的那一刻。那是在一门叫做“动态逻辑”的课程上，教师是活力十足的耶鲁大学教授Lenore Zuck，她是计算机系那些聪明的老师中最聪明的人之一。

如今， 由于记忆力糟糕， 我已经差不多把这门课的内容忘光了，但是不管怎么说，在这里我还是想要对付着说一下。大致上，形式逻辑的意思是说，如果条件成立，你就能证明结论也成立。比如，根据形式逻辑，已知“只要成绩好，就能被雇用”，然后假定“Johnny的成绩好”，你就可以得到一个崭新的结论“Johnny会被雇用”。这完全是经典方法。但是，一个解构主义者（deconstructionist）只需要10秒钟就能破坏形式逻辑中所有有用的东西。这样一来，留给你的只是一些趣味性，而不是实用性。

现在再来说动态逻辑。它与形式逻辑其实是一回事，但是必须再多考虑时间因素。比如，“你打开灯之后，就能看见自己的鞋子”，已知“灯以前是亮的”，那么这就意味着“你看见了自己的鞋子”。

对于像Zuck教授那样聪明的理论家，动态逻辑充满了吸引力，因为它看上去很有希望让你在形式上证明一些计算机程序的相关理论问题。这样做说不定很有用。比如，你可以用它在形式上证明，火星漫游车的闪存卡不会发生溢出（overflow）问题，不会因而整天一遍又一遍地重启，耽误了它在那颗赤红色的星球上漫游寻找火星人马文（Marvin the Martian）。

在第一堂课上，Zuck博士写满了整整两面黑板，甚至黑板旁边的墙上都写上了很多证明步骤。需要证明的问题是，有一个控制灯泡的开关，现在灯泡没有亮，这时你打开了开关，请证明灯泡将会点亮。

整个证明过程复杂得不可思议，处处都是陷阱，必须十分小心。保证这个证明不出错太困难了，还不如直接相信打开开关灯就会亮。真的，虽然证明过程写满了许多块黑板，但是还是有许多中间步骤被省略了，因为如果要从形式逻辑上完整证明所有步骤，那就琐碎得无法形容了。许多步骤是用各种经典的逻辑证明方法推导得到的，包括归纳法、反证法等，甚至有些部分还是由旁听的研究生证明的。

留给我们的课后作业是证明逆命题：如果灯原来是关着的，现在却亮了，那么请证明开关的状态一定同原来相反。

我动手开始证明，我真的去证明了。

我在图书馆里待了很长时间。

我对照着Zuck博士的原始证明想依样画葫芦。研究了几个小时之后，我在其中发现了一个错误。可能我抄写的时候抄错了，但是这使得我想通了一件事。如果花费3个小时，写满了一块又一块的黑板，每一秒钟都可能出错，最后能够证明的却只是一个很琐碎的结论，那么这种方式有多大的实用性呢？在活生生、充满趣味的现实世界中，你永远都不会有机会使用它。

但是，动态逻辑的理论家们对这一点不感兴趣。他们看上它不是因为它有用，而是因为它可以为他们带来终身教职。

我放弃了这门课，并且发誓绝不会去读计算机科学的研究生。

这个故事告诉我们，计算机科学与软件开发不是一回事。如果你真的非常幸运，你的学校可能会开设很像样的软件开发课程。但是另一种可能是，你的学校根本不教你在现实中如何编程，因为精英学校都觉得，教授工作技能最好留给职业技术学校、犯人重返社会的培训项目去做。你到处都能学怎么写代码。别忘了，我们是耶鲁大学，我们的使命是培养未来的世界领袖。你交了16万美元的学费，却在学循环语句的写法，这怎么可以？你以为这是什么地方，难道是机场沿途的酒店里临时拼凑起来不靠谱的Java语言培训班？哼哼。

麻烦在于我们没有一种真正教授软件开发的专门学校。你如果想成为一个程序员，你可能只能选择计算机科学专业。这是一个不错的专业，但是它同软件开发不是一回事。在那些400等级的课程代号中，去寻找名称中带有“Practicum”这个词的课程吧（编者注：指供人实习的课程）。不要被这个拉丁语单词吓倒，这些都是有用的课程，之所以起这种名字，只是为了让那些文绉绉、装腔作势、满嘴胡说八道的公司经理们觉得高深莫测。

6、别担心所有工作都被印度人抢走

我首先要说的是，如果你本身就已经在印度了，或者你就是印度人，那么你真的毫无必要去想这件事，根本不用琢磨所有的工作机会是不是都跑到了印度。那些都是非常好的工作，好好地享受吧，祝你身体健康。

但是，我不断听说计算机系的入学人数下降得很厉害，已经到了危险的程度。根据我听到的说法，其中的一个原因是“学生们不愿去学一个工作机会都流向印度的专业”。这种担心大错特错，有很多理由可以反驳。首先，根据一时性的商业潮流决定个人的职业选择，这是愚蠢的。其次，即使编程工作无一幸存地都流向了印度和中国，但是学习编程本身依然是一种第一流的素质训练，可以为各种超级有趣的工作打下基础，比如业务流程工程（business process engineering）。再次，不管是在美国还是在印度，真正优秀的程序员依然是非常非常短缺的，这一点请相信我。不错，确实有相当一批失业的IT从业者在那里鼓噪，抱怨他们长时间找不到工作，但是你知道吗？即使冒着触怒这些人的风险，我还是要说，真正优秀的程序员根本不会失业。最后，你还能找到更好的专业吗？你觉得什么专业好？主修历史学？如果那样，你毕业的时候就会发现，根本没有其他选择，只能去法学院。不过我倒是知道一件事：99%的律师都痛恨他们的工作，痛恨他们当律师的每一分钟。可是，律师每周的工作时间偏偏长达90小时。就像我前面说过的：如果你喜欢编程，那么你真是受到了上天的眷顾。你是非常幸运的少数人之一，能够以自己喜欢的事谋生。

不过说实话，我不觉得学生们真的有上面的想法。近年来，计算机系入学人数的下降只是回到了历史上的正常水平，因为前些年的互联网狂热使得入学人数出现了大泡沫，抬高了基数。由于这种泡沫，许多并不真的喜欢编程的人也来读计算机系。他们心里想的是，只要进了计算机系，将来就能找到诱人的高薪工作，就能获得24岁当上CEO、进行IPO的机会。谢天谢地，这些人现在都离计算机系远远的了。

7、找一份好的暑期实习工作

精明的招聘负责人都知道，喜欢编程的人高中时就将牙医的信息输入了数据库，进入大学前就去过三次电脑夏令营，为校报做过内容管理系统，有过软件公司的夏季实习经历。招聘负责人就是要在你的简历上找这些东西。

如果你喜欢编程， 就不要随便什么工作都答应，否则你会犯下最大的错误。不管是暑期工作，还是兼职或者其他性质的工作，只要与编程无关，就不要轻易接受。我知道，其他19岁的孩子都想去购物中心里打工，在那里折叠衬衫。但是你与他们不同，你19岁时就已经掌握了一门非常有价值的技能。将时间浪费在折叠衬衫上是很愚蠢的，等到毕业的时候，你的简历上本应该写满了一大堆与编程相关的经历。就让那些财经类的毕业生去租车公司“帮助人们满足他们租车的需要”吧，你要干的是别的事。

如果你听从了我的建议，你还是有可能落得一个悲惨的下场，比如很早就卖掉了微软公司的股票，再比如拒绝了谷歌公司的工作机会，原因是你想要一间自己的可以关上门的独立办公室，或者做出了其他生命中愚蠢的决定。但是，这些可不是我的错。我一开始就告诉过你，不要听我的话。

本文转载自《软件随想录》(作者：Joel Spolsky ，译者: 阮一峰，2009年12月出版)','1522565604','php')
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:24
insert into tags (art_id ,tag) values (1,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:24
update categories set num=num+1 where cat_id=1
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:27
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:37
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:37
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 06:53:37
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:03
select * from articles where  art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:03
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:03
select title,content,cat_id,arttag from articles where art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:22
select * from articles where  art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:22
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:22
update articles set title='大牛给计算机专业学生的7个建议',cat_id='1',content='【导读】由于Joel Spolsky的双重身份（昔日耶鲁大学计算机系学长，今日Fog Creek软件公司的CEO），所以听听他的建议，对于当今无数困扰于就业压力的中国高校计算机专业学子来说，是大有裨益的。你们会发现，大多数建议，都在强调“软实力”的价值。
1、毕业前练好写作

如果不是Linus Torvalds不断地散布福音，请问Linux操作系统会成功吗？虽然他是一个非常聪明的计算机天才，但是Linux吸引来全世界一大批志愿者的真正原因却是Linus Torvalds的表达能力。他通过电子邮件和邮件列表用书面形式传播自己的想法，最终引起了所有人的注意。

你听说过现在风靡一时的“极限编程”（Extreme Programming）吗？我在这个地方不谈我对极限编程的看法，我只说如果你听过这个词，那么原因就是它的倡导者都是一些非常有才华的作家和演说家。

即使我们缩小范围，将目光局限在任何一个软件开发团体中，你也会发现该团体中最有权势和影响力的程序员正是那些表达能力强的程序员，他们无论是做书面表达还是做口头表达，都能够清晰、自如、具有说服力地传达观点。

一个普通程序员与一个优秀程序员的区别，不在于他们懂得的编程语言谁多谁少，也不在于他们喜欢用Python语言还是喜欢用Java语言，而在于他们能否与他人交流思想。如果你能说服其他人，你的力量就可以得到放大。如果你能写出清晰的注释和技术规格说明书，其他程序员就能够理解你的代码，因此他们就能在自己的代码中使用，而不必重写。如果你做不到这一点，你的代码对其他人就没有价值。如果你能为最终用户写出清晰的使用手册，其他人就能明白你的代码是用来干什么的，这是唯一让别人明白你的代码有何价值的方法。

如果一个程序员不会用英语写作、没有良好的写作能力，我就不会雇他。如果你能写，不管你去哪家公司工作，你很快就会发现写作技术文档的任务会落到你头上，这意味着你已经开始在放大自己的影响力了，管理层正在注意到你。

大学里有些课程被公认为“写作密集型”（writing intensive）课程，这就是说为了拿到学分，你必须写作多得可怕的文字。一定要去上这样的课程！不要管学科，只要这门课每周甚至每天都要你写东西，你就去上。

你还可以动手写日记或者网志。你写得越多，写作就会变得越容易。写起来越容易，你就会写得越多。这是一个良性循环。

2、毕业前学好C语言

第二点我要讲的是C语言。请注意，我说的是C语言，而不是C++。虽然在实际使用中C语言已经越来越罕见，但是它仍然是当前程序员的共同语言。C语言让程序员互相沟通，更重要的是，它比你在大学中学到的“现代语言”（比如ML语言、Java语言、Python语言或者其它正在教授的流行垃圾语言）都更接近机器。你至少需要花一个学期来了解机器原理，否则你永远不可能在高级语言的层次写出高效的代码。你也永远无法开发编译器和操作系统，而它们恰恰属于目前程序员能够得到的最佳工作之列。别人也永远不会放心将大型项目的架构设计交给你。

我不管你懂多少延续（continuation）、闭包（closure）、异常处理（exception handling），只要你不能解释为什么while (*s++ = *t++)；这句代码的作用是复制字符串，或者不觉得这是世界上对你来说再自然不过的事情，那么你就是在盲目无知的情况下编程。在我看来，这就好像一个医生不懂得最基本的解剖学就在开处方，他看病的根据完全是因为那些娃娃脸的医药厂商销售代表说这种药有用。

3、毕业前学好微观经济学

如果你没有上过任何经济学课程，那么我首先来做一个超短的评论：经济学是这样的学科之一，刚开始学的时候轰轰烈烈，有许多有用的、言之有理的理论和可以在真实世界中得到证明的事实，等等；但是，再学下去就每况愈下，有用的东西就不多了。经济学一开始那个有用的部分正是微观经济学，它是商业领域所有重要理论的基础。跟在微观经济学后面的东西就不行了。你接下来学的是宏观经济学，如果你愿意，尽管跳过去，也不会有什么损失。宏观经济学开头的部分是利息理论，内容比方说是利率与失业之间的关系，但是怎么说呢，看上去这部分里面还没有被证实的东西多于已经被证实的东西。学完这部分，后面的内容越来越糟糕，许多经济学专业的学生实际上都变成在搞物理学，因为这样才能在华尔街上找到更好的工作。但是不管怎样，你一定要去学微观经济学，因为你必须搞懂供给和需求，你必须明白竞争优势，你必须理解什么是净现值（NPV），什么是贴现，什么是边际效用。只有这样，你才会懂得为什么生意是现在这种做法。

为什么计算机系的学生也应该学经济学？因为，从经营一家公司的角度来看，比起那些不懂的程序员，一个理解基本商业规则的程序员将会更有价值。就是这么简单。我无法告诉你有多少次我是那样地充满挫折感，因为我看到了太多的提出一些疯狂的想法的程序员，这些想法在代码上也许可行，但在资本主义世界中毫无意义。如果你懂得商业规则，你就是一个更有价值的程序员，你会因此得到回报的，但是前提是你要去学习微观经济学。

4、不要因为枯燥就不选修非计算机专业的课程

想提高GPA绩点的一个好方法就是多选修非计算机系的课程。请千万不要低估你的GPA的重大意义。千千万万的人事经理和招聘人员在拿到一份简历的时候，第一眼就会去看GPA，包括我也是这样。我们不会为这种做法道歉。为什么？因为GPA不反映单个的成绩，而是代表了许多个教授在一段很长的时间中，在不同的情况下，对你的表现的一个总的评估。SAT成绩难道不够吗？哈，那只不过是一场几个小时的测试罢了。GPA中包括了四年大学期间你的小论文、期中考试和课堂表现，总数有几百次之多。当然，GPA也有自己的问题，不是百分之百准确。比如，这些年来，老师对学生的打分越来越宽松，学习成绩有通货膨胀的趋势。再比如，GPA无法反映课程的难度，没人能够看出你的GPA是来自无名社区大学家政系的轻松课程还是来自加州理工学院针对研究生的量子力学课程。渐渐地，我形成了一套自己的做法，首先我会过滤掉所有来自社区大学、GPA低于2.5的简历，然后我会要求剩下的人给我寄成绩单和推荐信。我再从中发现那些成绩一贯优秀的人，而不是那些仅仅在计算机系课程中得到高分的人。

为什么我要关心某人的“欧洲历史”课程成绩呢，毕竟作为雇主我要找的应该是程序员啊？何况，历史是那么枯燥，不得高分很正常。哦，这么说来，你的意思是我应该雇用你，而不用考虑一旦工作变得枯燥你会不会努力工作？别忘了，在编程工作中也有很枯燥的东西。每一项工作都有枯燥难耐的时刻。我不想雇用那些只想干有趣事情的人。

5、选修有大量编程实践的课程

我依然清楚记得我发誓绝不读研究生的那一刻。那是在一门叫做“动态逻辑”的课程上，教师是活力十足的耶鲁大学教授Lenore Zuck，她是计算机系那些聪明的老师中最聪明的人之一。

如今， 由于记忆力糟糕， 我已经差不多把这门课的内容忘光了，但是不管怎么说，在这里我还是想要对付着说一下。大致上，形式逻辑的意思是说，如果条件成立，你就能证明结论也成立。比如，根据形式逻辑，已知“只要成绩好，就能被雇用”，然后假定“Johnny的成绩好”，你就可以得到一个崭新的结论“Johnny会被雇用”。这完全是经典方法。但是，一个解构主义者（deconstructionist）只需要10秒钟就能破坏形式逻辑中所有有用的东西。这样一来，留给你的只是一些趣味性，而不是实用性。

现在再来说动态逻辑。它与形式逻辑其实是一回事，但是必须再多考虑时间因素。比如，“你打开灯之后，就能看见自己的鞋子”，已知“灯以前是亮的”，那么这就意味着“你看见了自己的鞋子”。

对于像Zuck教授那样聪明的理论家，动态逻辑充满了吸引力，因为它看上去很有希望让你在形式上证明一些计算机程序的相关理论问题。这样做说不定很有用。比如，你可以用它在形式上证明，火星漫游车的闪存卡不会发生溢出（overflow）问题，不会因而整天一遍又一遍地重启，耽误了它在那颗赤红色的星球上漫游寻找火星人马文（Marvin the Martian）。

在第一堂课上，Zuck博士写满了整整两面黑板，甚至黑板旁边的墙上都写上了很多证明步骤。需要证明的问题是，有一个控制灯泡的开关，现在灯泡没有亮，这时你打开了开关，请证明灯泡将会点亮。

整个证明过程复杂得不可思议，处处都是陷阱，必须十分小心。保证这个证明不出错太困难了，还不如直接相信打开开关灯就会亮。真的，虽然证明过程写满了许多块黑板，但是还是有许多中间步骤被省略了，因为如果要从形式逻辑上完整证明所有步骤，那就琐碎得无法形容了。许多步骤是用各种经典的逻辑证明方法推导得到的，包括归纳法、反证法等，甚至有些部分还是由旁听的研究生证明的。

留给我们的课后作业是证明逆命题：如果灯原来是关着的，现在却亮了，那么请证明开关的状态一定同原来相反。

我动手开始证明，我真的去证明了。

我在图书馆里待了很长时间。

我对照着Zuck博士的原始证明想依样画葫芦。研究了几个小时之后，我在其中发现了一个错误。可能我抄写的时候抄错了，但是这使得我想通了一件事。如果花费3个小时，写满了一块又一块的黑板，每一秒钟都可能出错，最后能够证明的却只是一个很琐碎的结论，那么这种方式有多大的实用性呢？在活生生、充满趣味的现实世界中，你永远都不会有机会使用它。

但是，动态逻辑的理论家们对这一点不感兴趣。他们看上它不是因为它有用，而是因为它可以为他们带来终身教职。

我放弃了这门课，并且发誓绝不会去读计算机科学的研究生。

这个故事告诉我们，计算机科学与软件开发不是一回事。如果你真的非常幸运，你的学校可能会开设很像样的软件开发课程。但是另一种可能是，你的学校根本不教你在现实中如何编程，因为精英学校都觉得，教授工作技能最好留给职业技术学校、犯人重返社会的培训项目去做。你到处都能学怎么写代码。别忘了，我们是耶鲁大学，我们的使命是培养未来的世界领袖。你交了16万美元的学费，却在学循环语句的写法，这怎么可以？你以为这是什么地方，难道是机场沿途的酒店里临时拼凑起来不靠谱的Java语言培训班？哼哼。

麻烦在于我们没有一种真正教授软件开发的专门学校。你如果想成为一个程序员，你可能只能选择计算机科学专业。这是一个不错的专业，但是它同软件开发不是一回事。在那些400等级的课程代号中，去寻找名称中带有“Practicum”这个词的课程吧（编者注：指供人实习的课程）。不要被这个拉丁语单词吓倒，这些都是有用的课程，之所以起这种名字，只是为了让那些文绉绉、装腔作势、满嘴胡说八道的公司经理们觉得高深莫测。

6、别担心所有工作都被印度人抢走

我首先要说的是，如果你本身就已经在印度了，或者你就是印度人，那么你真的毫无必要去想这件事，根本不用琢磨所有的工作机会是不是都跑到了印度。那些都是非常好的工作，好好地享受吧，祝你身体健康。

但是，我不断听说计算机系的入学人数下降得很厉害，已经到了危险的程度。根据我听到的说法，其中的一个原因是“学生们不愿去学一个工作机会都流向印度的专业”。这种担心大错特错，有很多理由可以反驳。首先，根据一时性的商业潮流决定个人的职业选择，这是愚蠢的。其次，即使编程工作无一幸存地都流向了印度和中国，但是学习编程本身依然是一种第一流的素质训练，可以为各种超级有趣的工作打下基础，比如业务流程工程（business process engineering）。再次，不管是在美国还是在印度，真正优秀的程序员依然是非常非常短缺的，这一点请相信我。不错，确实有相当一批失业的IT从业者在那里鼓噪，抱怨他们长时间找不到工作，但是你知道吗？即使冒着触怒这些人的风险，我还是要说，真正优秀的程序员根本不会失业。最后，你还能找到更好的专业吗？你觉得什么专业好？主修历史学？如果那样，你毕业的时候就会发现，根本没有其他选择，只能去法学院。不过我倒是知道一件事：99%的律师都痛恨他们的工作，痛恨他们当律师的每一分钟。可是，律师每周的工作时间偏偏长达90小时。就像我前面说过的：如果你喜欢编程，那么你真是受到了上天的眷顾。你是非常幸运的少数人之一，能够以自己喜欢的事谋生。

不过说实话，我不觉得学生们真的有上面的想法。近年来，计算机系入学人数的下降只是回到了历史上的正常水平，因为前些年的互联网狂热使得入学人数出现了大泡沫，抬高了基数。由于这种泡沫，许多并不真的喜欢编程的人也来读计算机系。他们心里想的是，只要进了计算机系，将来就能找到诱人的高薪工作，就能获得24岁当上CEO、进行IPO的机会。谢天谢地，这些人现在都离计算机系远远的了。

7、找一份好的暑期实习工作

精明的招聘负责人都知道，喜欢编程的人高中时就将牙医的信息输入了数据库，进入大学前就去过三次电脑夏令营，为校报做过内容管理系统，有过软件公司的夏季实习经历。招聘负责人就是要在你的简历上找这些东西。

如果你喜欢编程， 就不要随便什么工作都答应，否则你会犯下最大的错误。不管是暑期工作，还是兼职或者其他性质的工作，只要与编程无关，就不要轻易接受。我知道，其他19岁的孩子都想去购物中心里打工，在那里折叠衬衫。但是你与他们不同，你19岁时就已经掌握了一门非常有价值的技能。将时间浪费在折叠衬衫上是很愚蠢的，等到毕业的时候，你的简历上本应该写满了一大堆与编程相关的经历。就让那些财经类的毕业生去租车公司“帮助人们满足他们租车的需要”吧，你要干的是别的事。

如果你听从了我的建议，你还是有可能落得一个悲惨的下场，比如很早就卖掉了微软公司的股票，再比如拒绝了谷歌公司的工作机会，原因是你想要一间自己的可以关上门的独立办公室，或者做出了其他生命中愚蠢的决定。但是，这些可不是我的错。我一开始就告诉过你，不要听我的话。

本文转载自《软件随想录》(作者：Joel Spolsky ，译者: 阮一峰，2009年12月出版)',lastup='1522565662',arttag='php' where art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:22
delete from tags where art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:22
insert into tags (art_id,tag) values (1,'php')
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:29
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:29
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 06:54:29
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 06:56:51
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:56:51
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 06:56:51
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 06:58:22
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:58:23
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 06:58:25
select * from articles where  art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 06:58:25
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 06:58:25
select title,content,cat_id,arttag from articles where art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 07:20:49
select * from articles where  art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 07:20:49
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:20:49
update articles set title='PHP使用当前稳定版本 (7.1)',cat_id='1',content='如果你刚开始学习 PHP，请使用最新的稳定版本 PHP 7.1。PHP 7.1 非常新，相较于 5.x 版本增加了强大的 新特性。PHP 引擎大部分被重写，PHP 的运行速度已经远远超越过去。

在很长的一段时间内，你会发现 5.x 还在广泛的被使用，目前最新的 5.x 版本是 5.6。对于当下，这并不是一个坏选项。然而，你应该尽快升级 - PHP 5.6 将会在 2018 停止安全更新。7.1 做了 向下兼容 处理，所以你的升级应该不会很难。. 如果你想查找一个函数及其用法，可以去官方手册 php.net 中查找。',lastup='1522567249',arttag='php' where art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 07:20:49
delete from tags where art_id = 1
-----------------------------------------

-----------------------------------------
2018/04/01 07:20:49
insert into tags (art_id,tag) values (1,'php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:20:52
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:10
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:40
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:40
insert into articles (title,cat_id,content,pubtime,arttag) values ('PHP内置的 web 服务器','2','PHP 5.4 之后, 你可以不用安装和配置功能齐全的 Web 服务器，就可以开始学习 PHP。 要启动内置的 Web 服务器，需要从你的命令行终端进入项目的 Web 根目录，执行下面的命令:

> php -S localhost:8000','1522567300','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:40
insert into tags (art_id ,tag) values (2,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:40
update categories set num=num+1 where cat_id=2
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:45
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:21:56
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:23:51
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:23:51
insert into articles (title,cat_id,content,pubtime,arttag) values ('代码风格指南','3','PHP 社区百花齐放，拥有大量的函数库、框架和组件。PHP 开发者通常会在自己的项目中使用若干个外部库，因此 PHP 代码遵循（尽可能接近）同一个代码风格就非常重要，这让开发者可以轻松地将多个代码库整合到自己的项目中。

PHP标准组 提出并发布了一系列的风格建议。其中有部分是关于代码风格的，即 PSR-0, PSR-1, PSR-2 和 PSR-4。这些推荐只是一些被其他项目所遵循的规则，如 Drupal, Zend, Symfony, CakePHP, phpBB, AWS SDK, FuelPHP, Lithium 等。你可以把这些规则用在自己的项目中，或者继续使用自己的风格。

通常情况下，你应该遵循一个已知的标准来编写 PHP 代码。可能是 PSR 的组合或者是 PEAR 或 Zend 编码准则中的一个。这代表其他开发者能够方便的阅读和使用你的代码，并且使用这些组件的应用程序可以和其他第三方的组件保持一致。','1522567431','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:23:51
insert into tags (art_id ,tag) values (3,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:23:51
update categories set num=num+1 where cat_id=3
-----------------------------------------

-----------------------------------------
2018/04/01 07:23:54
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:24:18
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:24:20
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:25:16
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:25:16
insert into articles (title,cat_id,content,pic,thumb,pubtime,arttag) values ('编程范式','1','PHP 是一个灵活的动态语言，支持多种编程技巧。这几年一直不断的发展，重要的里程碑包含 PHP 5.0 (2004) 增加了完善的面向对象模型，PHP 5.3 (2009) 增加了匿名函数与命名空间以及 PHP 5.4 (2012) 增加的 traits。','/upload/2018/04/01/YqKBy7.jpg','/upload/2018/04/01/4DmxSh.png','1522567516','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:25:16
insert into tags (art_id ,tag) values (4,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:25:16
update categories set num=num+1 where cat_id=1
-----------------------------------------

-----------------------------------------
2018/04/01 07:25:18
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:25:21
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:26:14
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:26:14
insert into articles (title,cat_id,content,pic,thumb,pubtime,arttag) values ('面向对象编程','2','PHP 拥有完整的面向对象编程的特性，包括类，抽象类，接口，继承，构造函数，克隆和异常等','/upload/2018/04/01/ryZ2Rv.jpg','/upload/2018/04/01/W9EkHK.png','1522567574','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:26:14
insert into tags (art_id ,tag) values (5,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:26:14
update categories set num=num+1 where cat_id=2
-----------------------------------------

-----------------------------------------
2018/04/01 07:26:16
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:26:19
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:27:07
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:27:07
insert into articles (title,cat_id,content,pic,thumb,pubtime,arttag) values ('函数式编程 Functional Programming','3','PHP 支持函数是「第一等公民」，即函数可以被赋值给一个变量，包括用户自定义的或者是内置函数，然后动态调用它。函数可以作为参数传递给其他函数（称为_高阶函数_），也可以作为函数返回值返回。

PHP 支持递归，也就是函数自己调用自己，但多数 PHP 代码使用迭代。

自从 PHP 5.3 (2009) 之后开始引入对闭包以及匿名函数的支持。

PHP 5.4 增加了将闭包绑定到对象作用域中的特性，并改善其可调用性，如此即可在大部分情况下使用匿名函数取代一般的函数。','/upload/2018/04/01/3atFvU.jpg','/upload/2018/04/01/nkfBRu.png','1522567627','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:27:07
insert into tags (art_id ,tag) values (6,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:27:07
update categories set num=num+1 where cat_id=3
-----------------------------------------

-----------------------------------------
2018/04/01 07:27:10
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:27:12
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:00
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:00
insert into articles (title,cat_id,content,pic,thumb,pubtime,arttag) values ('元编程','1','PHP 通过反射 API 和魔术方法，可以实现多种方式的元编程。开发者通过魔术方法，如 __get(), __set(), __clone(), __toString(), __invoke()，等等，可以改变类的行为。Ruby 开发者常说 PHP 没有 method_missing 方法，实际上通过 __call() 和 __callStatic() 就可以完成相同的功能。','/upload/2018/04/01/Ndu3Ms.jpg','/upload/2018/04/01/FPs9jQ.png','1522567680','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:00
insert into tags (art_id ,tag) values (7,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:00
update categories set num=num+1 where cat_id=1
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:05
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:22
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:28:31
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:29:19
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:29:19
insert into articles (title,cat_id,content,pic,thumb,pubtime,arttag) values ('命名空间','2','如前所述，PHP 社区已经有许多开发者开发了大量的代码。这意味着一个类库的 PHP 代码可能使用了另外一个类库中相同的类名。如果他们使用同一个命名空间，那将会产生冲突导致异常。

命名空间 解决了这个问题。如 PHP 手册里所描述，命名空间好比操作系统中的目录，两个同名的文件可以共存在不同的目录下。同理两个同名的 PHP 类可以在不同的 PHP 命名空间下共存，就这么简单。

因此把你的代码放在你的命名空间下就非常重要，避免其他开发者担心与第三方类库冲突。

PSR-4 提供了一种命名空间的推荐使用方式，它提供一个标准的文件、类和命名空间的使用惯例，进而让代码做到随插即用。

2014 年 10 月，PHP-FIG 废弃了上一个自动加载标准： PSR-0，而采用新的自动加载标准 PSR-4。但 PSR-4 要求 PHP 5.3 以上的版本，而许多项目都还是使用 PHP 5.2，所以目前两者都能使用。

如果你在新应用或扩展包中使用自动加载标准，应优先考虑使用 PSR-4。','/upload/2018/04/01/KBcaM8.jpg','/upload/2018/04/01/CVXhtk.png','1522567759','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:29:19
insert into tags (art_id ,tag) values (8,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:29:19
update categories set num=num+1 where cat_id=2
-----------------------------------------

-----------------------------------------
2018/04/01 07:29:21
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:29:25
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:00
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:00
insert into articles (title,cat_id,content,pubtime,arttag) values ('PHP 标准库','3','PHP 标准库 (Standard PHP Library 简写为 SPL) 随着 PHP 一起发布，提供了一组类和接口。包含了常用的数据结构类 (堆栈，队列，堆等等)，以及遍历这些数据结构的迭代器，或者你可以自己实现 SPL 接口。','1522567800','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:00
insert into tags (art_id ,tag) values (9,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:00
update categories set num=num+1 where cat_id=3
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:02
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:15
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:58
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:58
insert into articles (title,cat_id,content,pubtime,arttag) values ('命令行接口','1','PHP 是为开发 Web 应用而创建，不过它的命令行脚本接口(CLI)也非常有用。PHP 命令行编程可以帮你完成自动化的任务，如测试，部署和应用管理。

CLI PHP 编程非常强大，可以直接调用你自己的程序代码而无需创建 Web 图形界面，需要注意的是 不要 把 CLI PHP 脚本放在公开的 web 目录下！','1522567858','php')
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:58
insert into tags (art_id ,tag) values (10,'php') 
-----------------------------------------

-----------------------------------------
2018/04/01 07:30:58
update categories set num=num+1 where cat_id=1
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:00
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:01
select art_id,title,pubtime,comm,catname from articles left join categories on articles.cat_id = categories.cat_id
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:07
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:07
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:07
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:17
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:17
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:17
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 2,2
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:39
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:39
select count(*) from articles where 1 
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:39
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  order by  art_id desc limit 4,2
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:51
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:51
select count(*) from articles where 1  and articles.cat_id = 1 
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:51
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  and articles.cat_id = 1  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:53
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:53
select count(*) from articles where 1  and articles.cat_id = 2 
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:53
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  and articles.cat_id = 2  order by  art_id desc limit 0,2
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:55
select * from categories
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:55
select count(*) from articles where 1  and articles.cat_id = 3 
-----------------------------------------

-----------------------------------------
2018/04/01 07:31:55
select art_id,title,content,pubtime,comm,catname,arttag,thumb from articles inner join categories on articles.cat_id = categories.cat_id where 1  and articles.cat_id = 3  order by  art_id desc limit 0,2
-----------------------------------------

